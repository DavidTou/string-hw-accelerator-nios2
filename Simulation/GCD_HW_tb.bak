 /*
 * ###############################################################################
 * CPE423
 * Assignment 3 - Greatest Common Divisor (TESTBENCH)
 * David Tougaw 
 * --------------------------------------
 * Greatest Common Calculator
 * 32 bit integer inputs A and B
 * 
 * Reset (KEY0), LoadA(KEY1), LoadB(KEY2), and Go (Key3)
 * ------------------------------------------------------------------------------
 * To overcome debouncing problems of KEYs, the following protocol is implemented.
 * After initial Reset, FSM will follow these steps: 
 * 0) LoadA => load low 16 bits of A
 * 1) LoadB => load low 16 bits of B
 * 2) LoadA => load high 16 bits of A
 * 3) LoadB => load high 16 bits of B
 * 4) Go => calculate, display result
 * ###############################################################################
 */
// http://www.alcula.com/calculators/math/gcd/

`timescale 1ns / 1ps

module GCD_HW_tb(); 

logic [15:0] SW;
logic resetn,loadA,loadB, done, clock;
logic [31:0] R,to_reg,B;		

GCD_HW U1 ( .clock(clock), .resetn(resetn), .opIn(to_reg), .loadA(loadA),.loadB(loadB), .outGCD(R),.outDone(done));


// Clock & TIme Unit Set-up
// Start Time = 0 ns
// End Time = 1 us
// T = 40 ns
always
   begin
	   clock  = 1'b1  ; #20;
		clock  = 1'b0  ; #20; 
		// 1 us, repeat pattern in loop.
end

initial begin
	/*INITIALIZE INPUT & CONTROLS*/
	
	loadA = 1'b0;
	loadB = 1'b0;
	done = 1'b0;
	resetn = 1'b1;
	#80;
	/* Reset */
	
	#80; resetn = 1'b0;				// Unpress Reset

	// ############ TEST 1 (odd,odd) GCD(9,27) == 9 #################

	#80 to_reg = 32'd3;  		// Load low A

	#80; loadA = 1'b1;				// Press LoadA

	#80; loadA = 1'b0;

	#80 to_reg = 32'd9;  		// Load low B

	#80; loadB = 1'b1;				// Unpress LoadA


	
	#80; SW = 16'b0000_0000_0000_0000;  		// Load High A
	
	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA
	
	#80; SW = 16'b0000_0000_0000_0000;		// Load High B
	
	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; Go =  1'b0;				// Press Go
	#80; Go =  1'b1;				// Unpress Go
	
	#1000;
	
	assert (R == 9) $display("GCD(9,27) == 9");
	else 
		$display("Case GCD a=9 b=27 failed");
	// ##############################################################

	// ############ TEST 2 (even,even) GCD(2,6) == 2 #################

	#80 SW = 16'b0000_0000_0000_0011;  		// Load low A

	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA

	#80; SW = 16'b0000_0000_0000_0110;		// Load Low B

	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; SW = 16'b0000_0000_0000_0000;  		// Load High A
	
	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA
	
	#80; SW = 16'b0000_0000_0000_0000;		// Load High B
	
	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; Go =  1'b0;				// Press Go
	#80; Go =  1'b1;				// Unpress Go
	
	#1000;
	
	assert (R == 3) $display("GCD(2,6) == 2");
	else 
		$display("Case GCD a=2 b=6 failed");
	// ##############################################################

	// ############ TEST 3 (even,odd) GCD(2,9) == 1 #################

	#80 SW = 16'b0000_0000_0000_0010;  		// Load low A

	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA

	#80; SW = 16'b0000_0000_0000_1001;		// Load Low B

	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; SW = 16'b0000_0000_0000_0000;  		// Load High A
	
	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA
	
	#80; SW = 16'b0000_0000_0000_0000;		// Load High B
	
	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; Go =  1'b0;				// Press Go
	#80; Go =  1'b1;				// Unpress Go
	
	#1000;
	
	assert (R == 1) $display("GCD(2,9) == 1");
	else 
		$display("Case GCD a=2 b=9 failed");
	// ##############################################################

	// ############ TEST 4 (0,odd) GCD(0,9) == 9 #################

	#80 SW = 16'b0000_0000_0000_0000;  		// Load low A

	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA

	#80; SW = 16'b0000_0000_0000_1001;		// Load Low B

	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; SW = 16'b0000_0000_0000_0000;  		// Load High A
	
	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA
	
	#80; SW = 16'b0000_0000_0000_0000;		// Load High B
	
	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; Go =  1'b0;				// Press Go
	#80; Go =  1'b1;				// Unpress Go
	
	#1000;
	
	assert (R == 9) $display("GCD(0,9) == 9");
	else 
		$display("Case GCD a=0 b=9 failed");
	// ##############################################################

	// ############ TEST 5 GCD(699050,150) == 50 HEX=>(32) #################

	#80 SW = 16'b1010_1010_1010_1010;  		// Load low A

	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA

	#80; SW = 16'b0000_0000_1001_0110;		// Load Low B

	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; SW = 16'b0000_0000_0000_1010;  		// Load High A
	
	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA
	
	#80; SW = 16'b0000_0000_0000_0000;		// Load High B
	
	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; Go =  1'b0;				// Press Go
	#80; Go =  1'b1;				// Unpress Go
	
	#1000;
	
	assert (R == 50) $display("GCD(699050,150) == 50");
	else 
		$display("Case GCD a=699050 b=150 failed");
	// ##############################################################

	// ############ TEST 6 GCD(575,1048575) == 25 HEX=>(19) #################
	// GCD(0x0000_023F,0x000F_FFFF) == 0x19
	#80 SW = 16'b1111_1111_1111_1111;  		// Load low A

	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA

	#80; SW = 16'b0000_0010_0011_1111;		// Load Low B

	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; SW = 16'b0000_0000_0000_1111;  		// Load High A
	
	#80; LoadA = 1'b0;				// Press LoadA

	#80; LoadA = 1'b1;				// Unpress LoadA
	
	#80; SW = 16'b0000_0000_0000_0000;		// Load High B
	
	#80; LoadB = 1'b0;				// Press LoadB
	
	#80; LoadB = 1'b1;				// Unpress LoadB 
	
	#80; Go =  1'b0;				// Press Go
	#80; Go =  1'b1;				// Unpress Go
	
	#1000;
	
	assert (R == 25) $display("GCD(575,1048575) == 25");
	else 
		$display("Case GCD a=575 b=1048575 failed");
	// ##############################################################
		
end
	
	
endmodule

